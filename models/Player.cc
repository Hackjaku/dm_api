/**
 *
 *  Player.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Player.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::dnd;

const std::string Player::Cols::_Id = "Id";
const std::string Player::Cols::_Name = "Name";
const std::string Player::Cols::_Race = "Race";
const std::string Player::Cols::_Class = "Class";
const std::string Player::Cols::_Str = "Str";
const std::string Player::Cols::_Con = "Con";
const std::string Player::Cols::_Dex = "Dex";
const std::string Player::Cols::_Int = "Int";
const std::string Player::Cols::_Wis = "Wis";
const std::string Player::Cols::_Cha = "Cha";
const std::string Player::Cols::_RolledHp = "RolledHp";
const std::string Player::Cols::_Xp = "Xp";
const std::string Player::primaryKeyName = "Id";
const bool Player::hasPrimaryKey = true;
const std::string Player::tableName = "player";

const std::vector<typename Player::MetaData> Player::metaData_={
{"Id","int32_t","int(11)",4,1,1,1},
{"Name","std::string","varchar(100)",100,0,0,0},
{"Race","std::string","varchar(100)",100,0,0,0},
{"Class","std::string","varchar(100)",100,0,0,0},
{"Str","int16_t","smallint(6)",2,0,0,1},
{"Con","int16_t","smallint(6)",2,0,0,1},
{"Dex","int16_t","smallint(6)",2,0,0,1},
{"Int","int16_t","smallint(6)",2,0,0,1},
{"Wis","int16_t","smallint(6)",2,0,0,1},
{"Cha","int16_t","smallint(6)",2,0,0,1},
{"RolledHp","int16_t","smallint(6)",2,0,0,1},
{"Xp","int32_t","int(11)",4,0,0,1}
};
const std::string &Player::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Player::Player(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["Id"].isNull())
        {
            id_=std::make_shared<int32_t>(r["Id"].as<int32_t>());
        }
        if(!r["Name"].isNull())
        {
            name_=std::make_shared<std::string>(r["Name"].as<std::string>());
        }
        if(!r["Race"].isNull())
        {
            race_=std::make_shared<std::string>(r["Race"].as<std::string>());
        }
        if(!r["Class"].isNull())
        {
            class_=std::make_shared<std::string>(r["Class"].as<std::string>());
        }
        if(!r["Str"].isNull())
        {
            str_=std::make_shared<int16_t>(r["Str"].as<int16_t>());
        }
        if(!r["Con"].isNull())
        {
            con_=std::make_shared<int16_t>(r["Con"].as<int16_t>());
        }
        if(!r["Dex"].isNull())
        {
            dex_=std::make_shared<int16_t>(r["Dex"].as<int16_t>());
        }
        if(!r["Int"].isNull())
        {
            int_=std::make_shared<int16_t>(r["Int"].as<int16_t>());
        }
        if(!r["Wis"].isNull())
        {
            wis_=std::make_shared<int16_t>(r["Wis"].as<int16_t>());
        }
        if(!r["Cha"].isNull())
        {
            cha_=std::make_shared<int16_t>(r["Cha"].as<int16_t>());
        }
        if(!r["RolledHp"].isNull())
        {
            rolledhp_=std::make_shared<int16_t>(r["RolledHp"].as<int16_t>());
        }
        if(!r["Xp"].isNull())
        {
            xp_=std::make_shared<int32_t>(r["Xp"].as<int32_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 12 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            name_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            race_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            class_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            str_=std::make_shared<int16_t>(r[index].as<int16_t>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            con_=std::make_shared<int16_t>(r[index].as<int16_t>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            dex_=std::make_shared<int16_t>(r[index].as<int16_t>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            int_=std::make_shared<int16_t>(r[index].as<int16_t>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            wis_=std::make_shared<int16_t>(r[index].as<int16_t>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            cha_=std::make_shared<int16_t>(r[index].as<int16_t>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            rolledhp_=std::make_shared<int16_t>(r[index].as<int16_t>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            xp_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
    }

}

Player::Player(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 12)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            race_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            class_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            str_=std::make_shared<int16_t>((int16_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            con_=std::make_shared<int16_t>((int16_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            dex_=std::make_shared<int16_t>((int16_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            int_=std::make_shared<int16_t>((int16_t)pJson[pMasqueradingVector[7]].asInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            wis_=std::make_shared<int16_t>((int16_t)pJson[pMasqueradingVector[8]].asInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            cha_=std::make_shared<int16_t>((int16_t)pJson[pMasqueradingVector[9]].asInt64());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            rolledhp_=std::make_shared<int16_t>((int16_t)pJson[pMasqueradingVector[10]].asInt64());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            xp_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[11]].asInt64());
        }
    }
}

Player::Player(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("Id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["Id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["Id"].asInt64());
        }
    }
    if(pJson.isMember("Name"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["Name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["Name"].asString());
        }
    }
    if(pJson.isMember("Race"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["Race"].isNull())
        {
            race_=std::make_shared<std::string>(pJson["Race"].asString());
        }
    }
    if(pJson.isMember("Class"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["Class"].isNull())
        {
            class_=std::make_shared<std::string>(pJson["Class"].asString());
        }
    }
    if(pJson.isMember("Str"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["Str"].isNull())
        {
            str_=std::make_shared<int16_t>((int16_t)pJson["Str"].asInt64());
        }
    }
    if(pJson.isMember("Con"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["Con"].isNull())
        {
            con_=std::make_shared<int16_t>((int16_t)pJson["Con"].asInt64());
        }
    }
    if(pJson.isMember("Dex"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["Dex"].isNull())
        {
            dex_=std::make_shared<int16_t>((int16_t)pJson["Dex"].asInt64());
        }
    }
    if(pJson.isMember("Int"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["Int"].isNull())
        {
            int_=std::make_shared<int16_t>((int16_t)pJson["Int"].asInt64());
        }
    }
    if(pJson.isMember("Wis"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["Wis"].isNull())
        {
            wis_=std::make_shared<int16_t>((int16_t)pJson["Wis"].asInt64());
        }
    }
    if(pJson.isMember("Cha"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["Cha"].isNull())
        {
            cha_=std::make_shared<int16_t>((int16_t)pJson["Cha"].asInt64());
        }
    }
    if(pJson.isMember("RolledHp"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["RolledHp"].isNull())
        {
            rolledhp_=std::make_shared<int16_t>((int16_t)pJson["RolledHp"].asInt64());
        }
    }
    if(pJson.isMember("Xp"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["Xp"].isNull())
        {
            xp_=std::make_shared<int32_t>((int32_t)pJson["Xp"].asInt64());
        }
    }
}

void Player::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 12)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            race_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            class_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            str_=std::make_shared<int16_t>((int16_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            con_=std::make_shared<int16_t>((int16_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            dex_=std::make_shared<int16_t>((int16_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            int_=std::make_shared<int16_t>((int16_t)pJson[pMasqueradingVector[7]].asInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            wis_=std::make_shared<int16_t>((int16_t)pJson[pMasqueradingVector[8]].asInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            cha_=std::make_shared<int16_t>((int16_t)pJson[pMasqueradingVector[9]].asInt64());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            rolledhp_=std::make_shared<int16_t>((int16_t)pJson[pMasqueradingVector[10]].asInt64());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            xp_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[11]].asInt64());
        }
    }
}

void Player::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("Id"))
    {
        if(!pJson["Id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["Id"].asInt64());
        }
    }
    if(pJson.isMember("Name"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["Name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["Name"].asString());
        }
    }
    if(pJson.isMember("Race"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["Race"].isNull())
        {
            race_=std::make_shared<std::string>(pJson["Race"].asString());
        }
    }
    if(pJson.isMember("Class"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["Class"].isNull())
        {
            class_=std::make_shared<std::string>(pJson["Class"].asString());
        }
    }
    if(pJson.isMember("Str"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["Str"].isNull())
        {
            str_=std::make_shared<int16_t>((int16_t)pJson["Str"].asInt64());
        }
    }
    if(pJson.isMember("Con"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["Con"].isNull())
        {
            con_=std::make_shared<int16_t>((int16_t)pJson["Con"].asInt64());
        }
    }
    if(pJson.isMember("Dex"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["Dex"].isNull())
        {
            dex_=std::make_shared<int16_t>((int16_t)pJson["Dex"].asInt64());
        }
    }
    if(pJson.isMember("Int"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["Int"].isNull())
        {
            int_=std::make_shared<int16_t>((int16_t)pJson["Int"].asInt64());
        }
    }
    if(pJson.isMember("Wis"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["Wis"].isNull())
        {
            wis_=std::make_shared<int16_t>((int16_t)pJson["Wis"].asInt64());
        }
    }
    if(pJson.isMember("Cha"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["Cha"].isNull())
        {
            cha_=std::make_shared<int16_t>((int16_t)pJson["Cha"].asInt64());
        }
    }
    if(pJson.isMember("RolledHp"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["RolledHp"].isNull())
        {
            rolledhp_=std::make_shared<int16_t>((int16_t)pJson["RolledHp"].asInt64());
        }
    }
    if(pJson.isMember("Xp"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["Xp"].isNull())
        {
            xp_=std::make_shared<int32_t>((int32_t)pJson["Xp"].asInt64());
        }
    }
}

const int32_t &Player::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Player::getId() const noexcept
{
    return id_;
}
void Player::setId(const int32_t &pId) noexcept
{
    id_ = std::make_shared<int32_t>(pId);
    dirtyFlag_[0] = true;
}
const typename Player::PrimaryKeyType & Player::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &Player::getValueOfName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(name_)
        return *name_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Player::getName() const noexcept
{
    return name_;
}
void Player::setName(const std::string &pName) noexcept
{
    name_ = std::make_shared<std::string>(pName);
    dirtyFlag_[1] = true;
}
void Player::setName(std::string &&pName) noexcept
{
    name_ = std::make_shared<std::string>(std::move(pName));
    dirtyFlag_[1] = true;
}
void Player::setNameToNull() noexcept
{
    name_.reset();
    dirtyFlag_[1] = true;
}

const std::string &Player::getValueOfRace() const noexcept
{
    const static std::string defaultValue = std::string();
    if(race_)
        return *race_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Player::getRace() const noexcept
{
    return race_;
}
void Player::setRace(const std::string &pRace) noexcept
{
    race_ = std::make_shared<std::string>(pRace);
    dirtyFlag_[2] = true;
}
void Player::setRace(std::string &&pRace) noexcept
{
    race_ = std::make_shared<std::string>(std::move(pRace));
    dirtyFlag_[2] = true;
}
void Player::setRaceToNull() noexcept
{
    race_.reset();
    dirtyFlag_[2] = true;
}

const std::string &Player::getValueOfClass() const noexcept
{
    const static std::string defaultValue = std::string();
    if(class_)
        return *class_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Player::getClass() const noexcept
{
    return class_;
}
void Player::setClass(const std::string &pClass) noexcept
{
    class_ = std::make_shared<std::string>(pClass);
    dirtyFlag_[3] = true;
}
void Player::setClass(std::string &&pClass) noexcept
{
    class_ = std::make_shared<std::string>(std::move(pClass));
    dirtyFlag_[3] = true;
}
void Player::setClassToNull() noexcept
{
    class_.reset();
    dirtyFlag_[3] = true;
}

const int16_t &Player::getValueOfStr() const noexcept
{
    const static int16_t defaultValue = int16_t();
    if(str_)
        return *str_;
    return defaultValue;
}
const std::shared_ptr<int16_t> &Player::getStr() const noexcept
{
    return str_;
}
void Player::setStr(const int16_t &pStr) noexcept
{
    str_ = std::make_shared<int16_t>(pStr);
    dirtyFlag_[4] = true;
}

const int16_t &Player::getValueOfCon() const noexcept
{
    const static int16_t defaultValue = int16_t();
    if(con_)
        return *con_;
    return defaultValue;
}
const std::shared_ptr<int16_t> &Player::getCon() const noexcept
{
    return con_;
}
void Player::setCon(const int16_t &pCon) noexcept
{
    con_ = std::make_shared<int16_t>(pCon);
    dirtyFlag_[5] = true;
}

const int16_t &Player::getValueOfDex() const noexcept
{
    const static int16_t defaultValue = int16_t();
    if(dex_)
        return *dex_;
    return defaultValue;
}
const std::shared_ptr<int16_t> &Player::getDex() const noexcept
{
    return dex_;
}
void Player::setDex(const int16_t &pDex) noexcept
{
    dex_ = std::make_shared<int16_t>(pDex);
    dirtyFlag_[6] = true;
}

const int16_t &Player::getValueOfInt() const noexcept
{
    const static int16_t defaultValue = int16_t();
    if(int_)
        return *int_;
    return defaultValue;
}
const std::shared_ptr<int16_t> &Player::getInt() const noexcept
{
    return int_;
}
void Player::setInt(const int16_t &pInt) noexcept
{
    int_ = std::make_shared<int16_t>(pInt);
    dirtyFlag_[7] = true;
}

const int16_t &Player::getValueOfWis() const noexcept
{
    const static int16_t defaultValue = int16_t();
    if(wis_)
        return *wis_;
    return defaultValue;
}
const std::shared_ptr<int16_t> &Player::getWis() const noexcept
{
    return wis_;
}
void Player::setWis(const int16_t &pWis) noexcept
{
    wis_ = std::make_shared<int16_t>(pWis);
    dirtyFlag_[8] = true;
}

const int16_t &Player::getValueOfCha() const noexcept
{
    const static int16_t defaultValue = int16_t();
    if(cha_)
        return *cha_;
    return defaultValue;
}
const std::shared_ptr<int16_t> &Player::getCha() const noexcept
{
    return cha_;
}
void Player::setCha(const int16_t &pCha) noexcept
{
    cha_ = std::make_shared<int16_t>(pCha);
    dirtyFlag_[9] = true;
}

const int16_t &Player::getValueOfRolledhp() const noexcept
{
    const static int16_t defaultValue = int16_t();
    if(rolledhp_)
        return *rolledhp_;
    return defaultValue;
}
const std::shared_ptr<int16_t> &Player::getRolledhp() const noexcept
{
    return rolledhp_;
}
void Player::setRolledhp(const int16_t &pRolledhp) noexcept
{
    rolledhp_ = std::make_shared<int16_t>(pRolledhp);
    dirtyFlag_[10] = true;
}

const int32_t &Player::getValueOfXp() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(xp_)
        return *xp_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Player::getXp() const noexcept
{
    return xp_;
}
void Player::setXp(const int32_t &pXp) noexcept
{
    xp_ = std::make_shared<int32_t>(pXp);
    dirtyFlag_[11] = true;
}

void Player::updateId(const uint64_t id)
{
    id_ = std::make_shared<int32_t>(static_cast<int32_t>(id));
}

const std::vector<std::string> &Player::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "Name",
        "Race",
        "Class",
        "Str",
        "Con",
        "Dex",
        "Int",
        "Wis",
        "Cha",
        "RolledHp",
        "Xp"
    };
    return inCols;
}

void Player::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getRace())
        {
            binder << getValueOfRace();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getClass())
        {
            binder << getValueOfClass();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getStr())
        {
            binder << getValueOfStr();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getCon())
        {
            binder << getValueOfCon();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getDex())
        {
            binder << getValueOfDex();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getInt())
        {
            binder << getValueOfInt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getWis())
        {
            binder << getValueOfWis();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getCha())
        {
            binder << getValueOfCha();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getRolledhp())
        {
            binder << getValueOfRolledhp();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getXp())
        {
            binder << getValueOfXp();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Player::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    return ret;
}

void Player::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getRace())
        {
            binder << getValueOfRace();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getClass())
        {
            binder << getValueOfClass();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getStr())
        {
            binder << getValueOfStr();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getCon())
        {
            binder << getValueOfCon();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getDex())
        {
            binder << getValueOfDex();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getInt())
        {
            binder << getValueOfInt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getWis())
        {
            binder << getValueOfWis();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getCha())
        {
            binder << getValueOfCha();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getRolledhp())
        {
            binder << getValueOfRolledhp();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getXp())
        {
            binder << getValueOfXp();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Player::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["Id"]=getValueOfId();
    }
    else
    {
        ret["Id"]=Json::Value();
    }
    if(getName())
    {
        ret["Name"]=getValueOfName();
    }
    else
    {
        ret["Name"]=Json::Value();
    }
    if(getRace())
    {
        ret["Race"]=getValueOfRace();
    }
    else
    {
        ret["Race"]=Json::Value();
    }
    if(getClass())
    {
        ret["Class"]=getValueOfClass();
    }
    else
    {
        ret["Class"]=Json::Value();
    }
    if(getStr())
    {
        ret["Str"]=getValueOfStr();
    }
    else
    {
        ret["Str"]=Json::Value();
    }
    if(getCon())
    {
        ret["Con"]=getValueOfCon();
    }
    else
    {
        ret["Con"]=Json::Value();
    }
    if(getDex())
    {
        ret["Dex"]=getValueOfDex();
    }
    else
    {
        ret["Dex"]=Json::Value();
    }
    if(getInt())
    {
        ret["Int"]=getValueOfInt();
    }
    else
    {
        ret["Int"]=Json::Value();
    }
    if(getWis())
    {
        ret["Wis"]=getValueOfWis();
    }
    else
    {
        ret["Wis"]=Json::Value();
    }
    if(getCha())
    {
        ret["Cha"]=getValueOfCha();
    }
    else
    {
        ret["Cha"]=Json::Value();
    }
    if(getRolledhp())
    {
        ret["RolledHp"]=getValueOfRolledhp();
    }
    else
    {
        ret["RolledHp"]=Json::Value();
    }
    if(getXp())
    {
        ret["Xp"]=getValueOfXp();
    }
    else
    {
        ret["Xp"]=Json::Value();
    }
    return ret;
}

Json::Value Player::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 12)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getName())
            {
                ret[pMasqueradingVector[1]]=getValueOfName();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getRace())
            {
                ret[pMasqueradingVector[2]]=getValueOfRace();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getClass())
            {
                ret[pMasqueradingVector[3]]=getValueOfClass();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getStr())
            {
                ret[pMasqueradingVector[4]]=getValueOfStr();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getCon())
            {
                ret[pMasqueradingVector[5]]=getValueOfCon();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getDex())
            {
                ret[pMasqueradingVector[6]]=getValueOfDex();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getInt())
            {
                ret[pMasqueradingVector[7]]=getValueOfInt();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getWis())
            {
                ret[pMasqueradingVector[8]]=getValueOfWis();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getCha())
            {
                ret[pMasqueradingVector[9]]=getValueOfCha();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getRolledhp())
            {
                ret[pMasqueradingVector[10]]=getValueOfRolledhp();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getXp())
            {
                ret[pMasqueradingVector[11]]=getValueOfXp();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["Id"]=getValueOfId();
    }
    else
    {
        ret["Id"]=Json::Value();
    }
    if(getName())
    {
        ret["Name"]=getValueOfName();
    }
    else
    {
        ret["Name"]=Json::Value();
    }
    if(getRace())
    {
        ret["Race"]=getValueOfRace();
    }
    else
    {
        ret["Race"]=Json::Value();
    }
    if(getClass())
    {
        ret["Class"]=getValueOfClass();
    }
    else
    {
        ret["Class"]=Json::Value();
    }
    if(getStr())
    {
        ret["Str"]=getValueOfStr();
    }
    else
    {
        ret["Str"]=Json::Value();
    }
    if(getCon())
    {
        ret["Con"]=getValueOfCon();
    }
    else
    {
        ret["Con"]=Json::Value();
    }
    if(getDex())
    {
        ret["Dex"]=getValueOfDex();
    }
    else
    {
        ret["Dex"]=Json::Value();
    }
    if(getInt())
    {
        ret["Int"]=getValueOfInt();
    }
    else
    {
        ret["Int"]=Json::Value();
    }
    if(getWis())
    {
        ret["Wis"]=getValueOfWis();
    }
    else
    {
        ret["Wis"]=Json::Value();
    }
    if(getCha())
    {
        ret["Cha"]=getValueOfCha();
    }
    else
    {
        ret["Cha"]=Json::Value();
    }
    if(getRolledhp())
    {
        ret["RolledHp"]=getValueOfRolledhp();
    }
    else
    {
        ret["RolledHp"]=Json::Value();
    }
    if(getXp())
    {
        ret["Xp"]=getValueOfXp();
    }
    else
    {
        ret["Xp"]=Json::Value();
    }
    return ret;
}

bool Player::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("Id"))
    {
        if(!validJsonOfField(0, "Id", pJson["Id"], err, true))
            return false;
    }
    if(pJson.isMember("Name"))
    {
        if(!validJsonOfField(1, "Name", pJson["Name"], err, true))
            return false;
    }
    if(pJson.isMember("Race"))
    {
        if(!validJsonOfField(2, "Race", pJson["Race"], err, true))
            return false;
    }
    if(pJson.isMember("Class"))
    {
        if(!validJsonOfField(3, "Class", pJson["Class"], err, true))
            return false;
    }
    if(pJson.isMember("Str"))
    {
        if(!validJsonOfField(4, "Str", pJson["Str"], err, true))
            return false;
    }
    if(pJson.isMember("Con"))
    {
        if(!validJsonOfField(5, "Con", pJson["Con"], err, true))
            return false;
    }
    if(pJson.isMember("Dex"))
    {
        if(!validJsonOfField(6, "Dex", pJson["Dex"], err, true))
            return false;
    }
    if(pJson.isMember("Int"))
    {
        if(!validJsonOfField(7, "Int", pJson["Int"], err, true))
            return false;
    }
    if(pJson.isMember("Wis"))
    {
        if(!validJsonOfField(8, "Wis", pJson["Wis"], err, true))
            return false;
    }
    if(pJson.isMember("Cha"))
    {
        if(!validJsonOfField(9, "Cha", pJson["Cha"], err, true))
            return false;
    }
    if(pJson.isMember("RolledHp"))
    {
        if(!validJsonOfField(10, "RolledHp", pJson["RolledHp"], err, true))
            return false;
    }
    if(pJson.isMember("Xp"))
    {
        if(!validJsonOfField(11, "Xp", pJson["Xp"], err, true))
            return false;
    }
    return true;
}
bool Player::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                std::string &err)
{
    if(pMasqueradingVector.size() != 12)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[9].empty())
      {
          if(pJson.isMember(pMasqueradingVector[9]))
          {
              if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[10].empty())
      {
          if(pJson.isMember(pMasqueradingVector[10]))
          {
              if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[11].empty())
      {
          if(pJson.isMember(pMasqueradingVector[11]))
          {
              if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Player::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("Id"))
    {
        if(!validJsonOfField(0, "Id", pJson["Id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("Name"))
    {
        if(!validJsonOfField(1, "Name", pJson["Name"], err, false))
            return false;
    }
    if(pJson.isMember("Race"))
    {
        if(!validJsonOfField(2, "Race", pJson["Race"], err, false))
            return false;
    }
    if(pJson.isMember("Class"))
    {
        if(!validJsonOfField(3, "Class", pJson["Class"], err, false))
            return false;
    }
    if(pJson.isMember("Str"))
    {
        if(!validJsonOfField(4, "Str", pJson["Str"], err, false))
            return false;
    }
    if(pJson.isMember("Con"))
    {
        if(!validJsonOfField(5, "Con", pJson["Con"], err, false))
            return false;
    }
    if(pJson.isMember("Dex"))
    {
        if(!validJsonOfField(6, "Dex", pJson["Dex"], err, false))
            return false;
    }
    if(pJson.isMember("Int"))
    {
        if(!validJsonOfField(7, "Int", pJson["Int"], err, false))
            return false;
    }
    if(pJson.isMember("Wis"))
    {
        if(!validJsonOfField(8, "Wis", pJson["Wis"], err, false))
            return false;
    }
    if(pJson.isMember("Cha"))
    {
        if(!validJsonOfField(9, "Cha", pJson["Cha"], err, false))
            return false;
    }
    if(pJson.isMember("RolledHp"))
    {
        if(!validJsonOfField(10, "RolledHp", pJson["RolledHp"], err, false))
            return false;
    }
    if(pJson.isMember("Xp"))
    {
        if(!validJsonOfField(11, "Xp", pJson["Xp"], err, false))
            return false;
    }
    return true;
}
bool Player::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                              const std::vector<std::string> &pMasqueradingVector,
                                              std::string &err)
{
    if(pMasqueradingVector.size() != 12)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
      if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
      {
          if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
              return false;
      }
      if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
      {
          if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
              return false;
      }
      if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
      {
          if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Player::validJsonOfField(size_t index,
                              const std::string &fieldName,
                              const Json::Value &pJson,
                              std::string &err,
                              bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 100)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 100)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 100)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 100)";
                return false;
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 100)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 100)";
                return false;
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 10:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 11:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
