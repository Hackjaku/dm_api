/**
 *
 *  Event.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Event.h"
#include "Effect.h"
#include "Item.h"
#include "Player.h"
#include "Spell.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::dnd;

const std::string Event::Cols::_Id = "Id";
const std::string Event::Cols::_Name = "Name";
const std::string Event::Cols::_Description = "Description";
const std::string Event::Cols::_Duration = "Duration";
const std::string Event::Cols::_EffectId = "EffectId";
const std::string Event::Cols::_Amount = "Amount";
const std::string Event::Cols::_PlayerId = "PlayerId";
const std::string Event::Cols::_ItemId = "ItemId";
const std::string Event::Cols::_SpellId = "SpellId";
const std::string Event::primaryKeyName = "Id";
const bool Event::hasPrimaryKey = true;
const std::string Event::tableName = "event";

const std::vector<typename Event::MetaData> Event::metaData_={
{"Id","int32_t","int(11)",4,1,1,1},
{"Name","std::string","varchar(100)",100,0,0,1},
{"Description","std::string","varchar(100)",100,0,0,1},
{"Duration","int16_t","smallint(6)",2,0,0,0},
{"EffectId","int32_t","int(11)",4,0,0,0},
{"Amount","int16_t","smallint(6)",2,0,0,0},
{"PlayerId","int32_t","int(11)",4,0,0,0},
{"ItemId","int32_t","int(11)",4,0,0,0},
{"SpellId","int32_t","int(11)",4,0,0,0}
};
const std::string &Event::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Event::Event(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["Id"].isNull())
        {
            id_=std::make_shared<int32_t>(r["Id"].as<int32_t>());
        }
        if(!r["Name"].isNull())
        {
            name_=std::make_shared<std::string>(r["Name"].as<std::string>());
        }
        if(!r["Description"].isNull())
        {
            description_=std::make_shared<std::string>(r["Description"].as<std::string>());
        }
        if(!r["Duration"].isNull())
        {
            duration_=std::make_shared<int16_t>(r["Duration"].as<int16_t>());
        }
        if(!r["EffectId"].isNull())
        {
            effectid_=std::make_shared<int32_t>(r["EffectId"].as<int32_t>());
        }
        if(!r["Amount"].isNull())
        {
            amount_=std::make_shared<int16_t>(r["Amount"].as<int16_t>());
        }
        if(!r["PlayerId"].isNull())
        {
            playerid_=std::make_shared<int32_t>(r["PlayerId"].as<int32_t>());
        }
        if(!r["ItemId"].isNull())
        {
            itemid_=std::make_shared<int32_t>(r["ItemId"].as<int32_t>());
        }
        if(!r["SpellId"].isNull())
        {
            spellid_=std::make_shared<int32_t>(r["SpellId"].as<int32_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 9 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            name_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            description_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            duration_=std::make_shared<int16_t>(r[index].as<int16_t>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            effectid_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            amount_=std::make_shared<int16_t>(r[index].as<int16_t>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            playerid_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            itemid_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            spellid_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
    }

}

Event::Event(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 9)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            description_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            duration_=std::make_shared<int16_t>((int16_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            effectid_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            amount_=std::make_shared<int16_t>((int16_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            playerid_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            itemid_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[7]].asInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            spellid_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[8]].asInt64());
        }
    }
}

Event::Event(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("Id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["Id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["Id"].asInt64());
        }
    }
    if(pJson.isMember("Name"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["Name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["Name"].asString());
        }
    }
    if(pJson.isMember("Description"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["Description"].isNull())
        {
            description_=std::make_shared<std::string>(pJson["Description"].asString());
        }
    }
    if(pJson.isMember("Duration"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["Duration"].isNull())
        {
            duration_=std::make_shared<int16_t>((int16_t)pJson["Duration"].asInt64());
        }
    }
    if(pJson.isMember("EffectId"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["EffectId"].isNull())
        {
            effectid_=std::make_shared<int32_t>((int32_t)pJson["EffectId"].asInt64());
        }
    }
    if(pJson.isMember("Amount"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["Amount"].isNull())
        {
            amount_=std::make_shared<int16_t>((int16_t)pJson["Amount"].asInt64());
        }
    }
    if(pJson.isMember("PlayerId"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["PlayerId"].isNull())
        {
            playerid_=std::make_shared<int32_t>((int32_t)pJson["PlayerId"].asInt64());
        }
    }
    if(pJson.isMember("ItemId"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["ItemId"].isNull())
        {
            itemid_=std::make_shared<int32_t>((int32_t)pJson["ItemId"].asInt64());
        }
    }
    if(pJson.isMember("SpellId"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["SpellId"].isNull())
        {
            spellid_=std::make_shared<int32_t>((int32_t)pJson["SpellId"].asInt64());
        }
    }
}

void Event::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 9)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            description_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            duration_=std::make_shared<int16_t>((int16_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            effectid_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            amount_=std::make_shared<int16_t>((int16_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            playerid_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            itemid_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[7]].asInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            spellid_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[8]].asInt64());
        }
    }
}

void Event::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("Id"))
    {
        if(!pJson["Id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["Id"].asInt64());
        }
    }
    if(pJson.isMember("Name"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["Name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["Name"].asString());
        }
    }
    if(pJson.isMember("Description"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["Description"].isNull())
        {
            description_=std::make_shared<std::string>(pJson["Description"].asString());
        }
    }
    if(pJson.isMember("Duration"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["Duration"].isNull())
        {
            duration_=std::make_shared<int16_t>((int16_t)pJson["Duration"].asInt64());
        }
    }
    if(pJson.isMember("EffectId"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["EffectId"].isNull())
        {
            effectid_=std::make_shared<int32_t>((int32_t)pJson["EffectId"].asInt64());
        }
    }
    if(pJson.isMember("Amount"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["Amount"].isNull())
        {
            amount_=std::make_shared<int16_t>((int16_t)pJson["Amount"].asInt64());
        }
    }
    if(pJson.isMember("PlayerId"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["PlayerId"].isNull())
        {
            playerid_=std::make_shared<int32_t>((int32_t)pJson["PlayerId"].asInt64());
        }
    }
    if(pJson.isMember("ItemId"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["ItemId"].isNull())
        {
            itemid_=std::make_shared<int32_t>((int32_t)pJson["ItemId"].asInt64());
        }
    }
    if(pJson.isMember("SpellId"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["SpellId"].isNull())
        {
            spellid_=std::make_shared<int32_t>((int32_t)pJson["SpellId"].asInt64());
        }
    }
}

const int32_t &Event::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Event::getId() const noexcept
{
    return id_;
}
void Event::setId(const int32_t &pId) noexcept
{
    id_ = std::make_shared<int32_t>(pId);
    dirtyFlag_[0] = true;
}
const typename Event::PrimaryKeyType & Event::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &Event::getValueOfName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(name_)
        return *name_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Event::getName() const noexcept
{
    return name_;
}
void Event::setName(const std::string &pName) noexcept
{
    name_ = std::make_shared<std::string>(pName);
    dirtyFlag_[1] = true;
}
void Event::setName(std::string &&pName) noexcept
{
    name_ = std::make_shared<std::string>(std::move(pName));
    dirtyFlag_[1] = true;
}

const std::string &Event::getValueOfDescription() const noexcept
{
    const static std::string defaultValue = std::string();
    if(description_)
        return *description_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Event::getDescription() const noexcept
{
    return description_;
}
void Event::setDescription(const std::string &pDescription) noexcept
{
    description_ = std::make_shared<std::string>(pDescription);
    dirtyFlag_[2] = true;
}
void Event::setDescription(std::string &&pDescription) noexcept
{
    description_ = std::make_shared<std::string>(std::move(pDescription));
    dirtyFlag_[2] = true;
}

const int16_t &Event::getValueOfDuration() const noexcept
{
    const static int16_t defaultValue = int16_t();
    if(duration_)
        return *duration_;
    return defaultValue;
}
const std::shared_ptr<int16_t> &Event::getDuration() const noexcept
{
    return duration_;
}
void Event::setDuration(const int16_t &pDuration) noexcept
{
    duration_ = std::make_shared<int16_t>(pDuration);
    dirtyFlag_[3] = true;
}
void Event::setDurationToNull() noexcept
{
    duration_.reset();
    dirtyFlag_[3] = true;
}

const int32_t &Event::getValueOfEffectid() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(effectid_)
        return *effectid_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Event::getEffectid() const noexcept
{
    return effectid_;
}
void Event::setEffectid(const int32_t &pEffectid) noexcept
{
    effectid_ = std::make_shared<int32_t>(pEffectid);
    dirtyFlag_[4] = true;
}
void Event::setEffectidToNull() noexcept
{
    effectid_.reset();
    dirtyFlag_[4] = true;
}

const int16_t &Event::getValueOfAmount() const noexcept
{
    const static int16_t defaultValue = int16_t();
    if(amount_)
        return *amount_;
    return defaultValue;
}
const std::shared_ptr<int16_t> &Event::getAmount() const noexcept
{
    return amount_;
}
void Event::setAmount(const int16_t &pAmount) noexcept
{
    amount_ = std::make_shared<int16_t>(pAmount);
    dirtyFlag_[5] = true;
}
void Event::setAmountToNull() noexcept
{
    amount_.reset();
    dirtyFlag_[5] = true;
}

const int32_t &Event::getValueOfPlayerid() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(playerid_)
        return *playerid_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Event::getPlayerid() const noexcept
{
    return playerid_;
}
void Event::setPlayerid(const int32_t &pPlayerid) noexcept
{
    playerid_ = std::make_shared<int32_t>(pPlayerid);
    dirtyFlag_[6] = true;
}
void Event::setPlayeridToNull() noexcept
{
    playerid_.reset();
    dirtyFlag_[6] = true;
}

const int32_t &Event::getValueOfItemid() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(itemid_)
        return *itemid_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Event::getItemid() const noexcept
{
    return itemid_;
}
void Event::setItemid(const int32_t &pItemid) noexcept
{
    itemid_ = std::make_shared<int32_t>(pItemid);
    dirtyFlag_[7] = true;
}
void Event::setItemidToNull() noexcept
{
    itemid_.reset();
    dirtyFlag_[7] = true;
}

const int32_t &Event::getValueOfSpellid() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(spellid_)
        return *spellid_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Event::getSpellid() const noexcept
{
    return spellid_;
}
void Event::setSpellid(const int32_t &pSpellid) noexcept
{
    spellid_ = std::make_shared<int32_t>(pSpellid);
    dirtyFlag_[8] = true;
}
void Event::setSpellidToNull() noexcept
{
    spellid_.reset();
    dirtyFlag_[8] = true;
}

void Event::updateId(const uint64_t id)
{
    id_ = std::make_shared<int32_t>(static_cast<int32_t>(id));
}

const std::vector<std::string> &Event::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "Name",
        "Description",
        "Duration",
        "EffectId",
        "Amount",
        "PlayerId",
        "ItemId",
        "SpellId"
    };
    return inCols;
}

void Event::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getDescription())
        {
            binder << getValueOfDescription();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getDuration())
        {
            binder << getValueOfDuration();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getEffectid())
        {
            binder << getValueOfEffectid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getAmount())
        {
            binder << getValueOfAmount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getPlayerid())
        {
            binder << getValueOfPlayerid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getItemid())
        {
            binder << getValueOfItemid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getSpellid())
        {
            binder << getValueOfSpellid();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Event::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    return ret;
}

void Event::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getDescription())
        {
            binder << getValueOfDescription();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getDuration())
        {
            binder << getValueOfDuration();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getEffectid())
        {
            binder << getValueOfEffectid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getAmount())
        {
            binder << getValueOfAmount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getPlayerid())
        {
            binder << getValueOfPlayerid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getItemid())
        {
            binder << getValueOfItemid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getSpellid())
        {
            binder << getValueOfSpellid();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Event::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["Id"]=getValueOfId();
    }
    else
    {
        ret["Id"]=Json::Value();
    }
    if(getName())
    {
        ret["Name"]=getValueOfName();
    }
    else
    {
        ret["Name"]=Json::Value();
    }
    if(getDescription())
    {
        ret["Description"]=getValueOfDescription();
    }
    else
    {
        ret["Description"]=Json::Value();
    }
    if(getDuration())
    {
        ret["Duration"]=getValueOfDuration();
    }
    else
    {
        ret["Duration"]=Json::Value();
    }
    if(getEffectid())
    {
        ret["EffectId"]=getValueOfEffectid();
    }
    else
    {
        ret["EffectId"]=Json::Value();
    }
    if(getAmount())
    {
        ret["Amount"]=getValueOfAmount();
    }
    else
    {
        ret["Amount"]=Json::Value();
    }
    if(getPlayerid())
    {
        ret["PlayerId"]=getValueOfPlayerid();
    }
    else
    {
        ret["PlayerId"]=Json::Value();
    }
    if(getItemid())
    {
        ret["ItemId"]=getValueOfItemid();
    }
    else
    {
        ret["ItemId"]=Json::Value();
    }
    if(getSpellid())
    {
        ret["SpellId"]=getValueOfSpellid();
    }
    else
    {
        ret["SpellId"]=Json::Value();
    }
    return ret;
}

Json::Value Event::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 9)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getName())
            {
                ret[pMasqueradingVector[1]]=getValueOfName();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getDescription())
            {
                ret[pMasqueradingVector[2]]=getValueOfDescription();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getDuration())
            {
                ret[pMasqueradingVector[3]]=getValueOfDuration();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getEffectid())
            {
                ret[pMasqueradingVector[4]]=getValueOfEffectid();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getAmount())
            {
                ret[pMasqueradingVector[5]]=getValueOfAmount();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getPlayerid())
            {
                ret[pMasqueradingVector[6]]=getValueOfPlayerid();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getItemid())
            {
                ret[pMasqueradingVector[7]]=getValueOfItemid();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getSpellid())
            {
                ret[pMasqueradingVector[8]]=getValueOfSpellid();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["Id"]=getValueOfId();
    }
    else
    {
        ret["Id"]=Json::Value();
    }
    if(getName())
    {
        ret["Name"]=getValueOfName();
    }
    else
    {
        ret["Name"]=Json::Value();
    }
    if(getDescription())
    {
        ret["Description"]=getValueOfDescription();
    }
    else
    {
        ret["Description"]=Json::Value();
    }
    if(getDuration())
    {
        ret["Duration"]=getValueOfDuration();
    }
    else
    {
        ret["Duration"]=Json::Value();
    }
    if(getEffectid())
    {
        ret["EffectId"]=getValueOfEffectid();
    }
    else
    {
        ret["EffectId"]=Json::Value();
    }
    if(getAmount())
    {
        ret["Amount"]=getValueOfAmount();
    }
    else
    {
        ret["Amount"]=Json::Value();
    }
    if(getPlayerid())
    {
        ret["PlayerId"]=getValueOfPlayerid();
    }
    else
    {
        ret["PlayerId"]=Json::Value();
    }
    if(getItemid())
    {
        ret["ItemId"]=getValueOfItemid();
    }
    else
    {
        ret["ItemId"]=Json::Value();
    }
    if(getSpellid())
    {
        ret["SpellId"]=getValueOfSpellid();
    }
    else
    {
        ret["SpellId"]=Json::Value();
    }
    return ret;
}

bool Event::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("Id"))
    {
        if(!validJsonOfField(0, "Id", pJson["Id"], err, true))
            return false;
    }
    if(pJson.isMember("Name"))
    {
        if(!validJsonOfField(1, "Name", pJson["Name"], err, true))
            return false;
    }
    else
    {
        err="The Name column cannot be null";
        return false;
    }
    if(pJson.isMember("Description"))
    {
        if(!validJsonOfField(2, "Description", pJson["Description"], err, true))
            return false;
    }
    else
    {
        err="The Description column cannot be null";
        return false;
    }
    if(pJson.isMember("Duration"))
    {
        if(!validJsonOfField(3, "Duration", pJson["Duration"], err, true))
            return false;
    }
    if(pJson.isMember("EffectId"))
    {
        if(!validJsonOfField(4, "EffectId", pJson["EffectId"], err, true))
            return false;
    }
    if(pJson.isMember("Amount"))
    {
        if(!validJsonOfField(5, "Amount", pJson["Amount"], err, true))
            return false;
    }
    if(pJson.isMember("PlayerId"))
    {
        if(!validJsonOfField(6, "PlayerId", pJson["PlayerId"], err, true))
            return false;
    }
    if(pJson.isMember("ItemId"))
    {
        if(!validJsonOfField(7, "ItemId", pJson["ItemId"], err, true))
            return false;
    }
    if(pJson.isMember("SpellId"))
    {
        if(!validJsonOfField(8, "SpellId", pJson["SpellId"], err, true))
            return false;
    }
    return true;
}
bool Event::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if(pMasqueradingVector.size() != 9)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Event::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("Id"))
    {
        if(!validJsonOfField(0, "Id", pJson["Id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("Name"))
    {
        if(!validJsonOfField(1, "Name", pJson["Name"], err, false))
            return false;
    }
    if(pJson.isMember("Description"))
    {
        if(!validJsonOfField(2, "Description", pJson["Description"], err, false))
            return false;
    }
    if(pJson.isMember("Duration"))
    {
        if(!validJsonOfField(3, "Duration", pJson["Duration"], err, false))
            return false;
    }
    if(pJson.isMember("EffectId"))
    {
        if(!validJsonOfField(4, "EffectId", pJson["EffectId"], err, false))
            return false;
    }
    if(pJson.isMember("Amount"))
    {
        if(!validJsonOfField(5, "Amount", pJson["Amount"], err, false))
            return false;
    }
    if(pJson.isMember("PlayerId"))
    {
        if(!validJsonOfField(6, "PlayerId", pJson["PlayerId"], err, false))
            return false;
    }
    if(pJson.isMember("ItemId"))
    {
        if(!validJsonOfField(7, "ItemId", pJson["ItemId"], err, false))
            return false;
    }
    if(pJson.isMember("SpellId"))
    {
        if(!validJsonOfField(8, "SpellId", pJson["SpellId"], err, false))
            return false;
    }
    return true;
}
bool Event::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                             const std::vector<std::string> &pMasqueradingVector,
                                             std::string &err)
{
    if(pMasqueradingVector.size() != 9)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Event::validJsonOfField(size_t index,
                             const std::string &fieldName,
                             const Json::Value &pJson,
                             std::string &err,
                             bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 100)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 100)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 100)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 100)";
                return false;
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
void Event::getPlayer(const DbClientPtr &clientPtr,
                      const std::function<void(Player)> &rcb,
                      const ExceptionCallback &ecb) const
{
    const static std::string sql = "select * from player where Id = ?";
    *clientPtr << sql
               << *playerid_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(Player(r[0]));
                    }
               }
               >> ecb;
}
void Event::getEffect(const DbClientPtr &clientPtr,
                      const std::function<void(Effect)> &rcb,
                      const ExceptionCallback &ecb) const
{
    const static std::string sql = "select * from effect where Id = ?";
    *clientPtr << sql
               << *effectid_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(Effect(r[0]));
                    }
               }
               >> ecb;
}
void Event::getSpell(const DbClientPtr &clientPtr,
                     const std::function<void(Spell)> &rcb,
                     const ExceptionCallback &ecb) const
{
    const static std::string sql = "select * from spell where Id = ?";
    *clientPtr << sql
               << *spellid_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(Spell(r[0]));
                    }
               }
               >> ecb;
}
void Event::getItem(const DbClientPtr &clientPtr,
                    const std::function<void(Item)> &rcb,
                    const ExceptionCallback &ecb) const
{
    const static std::string sql = "select * from item where Id = ?";
    *clientPtr << sql
               << *itemid_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(Item(r[0]));
                    }
               }
               >> ecb;
}
